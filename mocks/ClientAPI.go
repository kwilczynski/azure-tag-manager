// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import autorest "github.com/Azure/go-autorest/autorest"
import context "context"
import mock "github.com/stretchr/testify/mock"
import resources "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-02-01/resources"

// ClientAPI is an autogenerated mock type for the ClientAPI type
type ClientAPI struct {
	mock.Mock
}

// CheckExistence provides a mock function with given fields: ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName
func (_m *ClientAPI) CheckExistence(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourcePath string, resourceType string, resourceName string) (autorest.Response, error) {
	ret := _m.Called(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)

	var r0 autorest.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) autorest.Response); ok {
		r0 = rf(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
	} else {
		r0 = ret.Get(0).(autorest.Response)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) error); ok {
		r1 = rf(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckExistenceByID provides a mock function with given fields: ctx, resourceID
func (_m *ClientAPI) CheckExistenceByID(ctx context.Context, resourceID string) (autorest.Response, error) {
	ret := _m.Called(ctx, resourceID)

	var r0 autorest.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) autorest.Response); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Get(0).(autorest.Response)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdate provides a mock function with given fields: ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters
func (_m *ClientAPI) CreateOrUpdate(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourcePath string, resourceType string, resourceName string, parameters resources.GenericResource) (resources.CreateOrUpdateFuture, error) {
	ret := _m.Called(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters)

	var r0 resources.CreateOrUpdateFuture
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, resources.GenericResource) resources.CreateOrUpdateFuture); ok {
		r0 = rf(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters)
	} else {
		r0 = ret.Get(0).(resources.CreateOrUpdateFuture)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, resources.GenericResource) error); ok {
		r1 = rf(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateByID provides a mock function with given fields: ctx, resourceID, parameters
func (_m *ClientAPI) CreateOrUpdateByID(ctx context.Context, resourceID string, parameters resources.GenericResource) (resources.CreateOrUpdateByIDFuture, error) {
	ret := _m.Called(ctx, resourceID, parameters)

	var r0 resources.CreateOrUpdateByIDFuture
	if rf, ok := ret.Get(0).(func(context.Context, string, resources.GenericResource) resources.CreateOrUpdateByIDFuture); ok {
		r0 = rf(ctx, resourceID, parameters)
	} else {
		r0 = ret.Get(0).(resources.CreateOrUpdateByIDFuture)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, resources.GenericResource) error); ok {
		r1 = rf(ctx, resourceID, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName
func (_m *ClientAPI) Delete(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourcePath string, resourceType string, resourceName string) (resources.DeleteFuture, error) {
	ret := _m.Called(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)

	var r0 resources.DeleteFuture
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) resources.DeleteFuture); ok {
		r0 = rf(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
	} else {
		r0 = ret.Get(0).(resources.DeleteFuture)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) error); ok {
		r1 = rf(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, resourceID
func (_m *ClientAPI) DeleteByID(ctx context.Context, resourceID string) (resources.DeleteByIDFuture, error) {
	ret := _m.Called(ctx, resourceID)

	var r0 resources.DeleteByIDFuture
	if rf, ok := ret.Get(0).(func(context.Context, string) resources.DeleteByIDFuture); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Get(0).(resources.DeleteByIDFuture)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName
func (_m *ClientAPI) Get(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourcePath string, resourceType string, resourceName string) (resources.GenericResource, error) {
	ret := _m.Called(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)

	var r0 resources.GenericResource
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) resources.GenericResource); ok {
		r0 = rf(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
	} else {
		r0 = ret.Get(0).(resources.GenericResource)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) error); ok {
		r1 = rf(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, resourceID
func (_m *ClientAPI) GetByID(ctx context.Context, resourceID string) (resources.GenericResource, error) {
	ret := _m.Called(ctx, resourceID)

	var r0 resources.GenericResource
	if rf, ok := ret.Get(0).(func(context.Context, string) resources.GenericResource); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Get(0).(resources.GenericResource)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, filter, expand, top
func (_m *ClientAPI) List(ctx context.Context, filter string, expand string, top *int32) (resources.ListResultPage, error) {
	ret := _m.Called(ctx, filter, expand, top)

	var r0 resources.ListResultPage
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *int32) resources.ListResultPage); ok {
		r0 = rf(ctx, filter, expand, top)
	} else {
		r0 = ret.Get(0).(resources.ListResultPage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *int32) error); ok {
		r1 = rf(ctx, filter, expand, top)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByResourceGroup provides a mock function with given fields: ctx, resourceGroupName, filter, expand, top
func (_m *ClientAPI) ListByResourceGroup(ctx context.Context, resourceGroupName string, filter string, expand string, top *int32) (resources.ListResultPage, error) {
	ret := _m.Called(ctx, resourceGroupName, filter, expand, top)

	var r0 resources.ListResultPage
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *int32) resources.ListResultPage); ok {
		r0 = rf(ctx, resourceGroupName, filter, expand, top)
	} else {
		r0 = ret.Get(0).(resources.ListResultPage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *int32) error); ok {
		r1 = rf(ctx, resourceGroupName, filter, expand, top)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveResources provides a mock function with given fields: ctx, sourceResourceGroupName, parameters
func (_m *ClientAPI) MoveResources(ctx context.Context, sourceResourceGroupName string, parameters resources.MoveInfo) (resources.MoveResourcesFuture, error) {
	ret := _m.Called(ctx, sourceResourceGroupName, parameters)

	var r0 resources.MoveResourcesFuture
	if rf, ok := ret.Get(0).(func(context.Context, string, resources.MoveInfo) resources.MoveResourcesFuture); ok {
		r0 = rf(ctx, sourceResourceGroupName, parameters)
	} else {
		r0 = ret.Get(0).(resources.MoveResourcesFuture)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, resources.MoveInfo) error); ok {
		r1 = rf(ctx, sourceResourceGroupName, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters
func (_m *ClientAPI) Update(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourcePath string, resourceType string, resourceName string, parameters resources.GenericResource) (resources.UpdateFuture, error) {
	ret := _m.Called(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters)

	var r0 resources.UpdateFuture
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, resources.GenericResource) resources.UpdateFuture); ok {
		r0 = rf(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters)
	} else {
		r0 = ret.Get(0).(resources.UpdateFuture)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, resources.GenericResource) error); ok {
		r1 = rf(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ctx, resourceID, parameters
func (_m *ClientAPI) UpdateByID(ctx context.Context, resourceID string, parameters resources.GenericResource) (resources.UpdateByIDFuture, error) {
	ret := _m.Called(ctx, resourceID, parameters)

	var r0 resources.UpdateByIDFuture
	if rf, ok := ret.Get(0).(func(context.Context, string, resources.GenericResource) resources.UpdateByIDFuture); ok {
		r0 = rf(ctx, resourceID, parameters)
	} else {
		r0 = ret.Get(0).(resources.UpdateByIDFuture)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, resources.GenericResource) error); ok {
		r1 = rf(ctx, resourceID, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateMoveResources provides a mock function with given fields: ctx, sourceResourceGroupName, parameters
func (_m *ClientAPI) ValidateMoveResources(ctx context.Context, sourceResourceGroupName string, parameters resources.MoveInfo) (resources.ValidateMoveResourcesFuture, error) {
	ret := _m.Called(ctx, sourceResourceGroupName, parameters)

	var r0 resources.ValidateMoveResourcesFuture
	if rf, ok := ret.Get(0).(func(context.Context, string, resources.MoveInfo) resources.ValidateMoveResourcesFuture); ok {
		r0 = rf(ctx, sourceResourceGroupName, parameters)
	} else {
		r0 = ret.Get(0).(resources.ValidateMoveResourcesFuture)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, resources.MoveInfo) error); ok {
		r1 = rf(ctx, sourceResourceGroupName, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
